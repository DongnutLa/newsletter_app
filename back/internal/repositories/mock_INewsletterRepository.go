// Code generated by mockery v2.28.1. DO NOT EDIT.

package repositories

import (
	context "context"

	domain "github.com/DongnutLa/newsletter_app/internal/core/domain"
	mock "github.com/stretchr/testify/mock"

	ports "github.com/DongnutLa/newsletter_app/internal/core/ports"
)

// MockINewsletterRepository is an autogenerated mock type for the INewsletterRepository type
type MockINewsletterRepository struct {
	mock.Mock
}

// DeleteOne provides a mock function with given fields: ctx, opts
func (_m *MockINewsletterRepository) DeleteOne(ctx context.Context, opts ports.DeleteOpts) (bool, error) {
	ret := _m.Called(ctx, opts)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.DeleteOpts) (bool, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.DeleteOpts) bool); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.DeleteOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, opts, result, returnCount
func (_m *MockINewsletterRepository) FindMany(ctx context.Context, opts ports.FindManyOpts, result *[]domain.Newsletter, returnCount bool) (*int64, error) {
	ret := _m.Called(ctx, opts, result, returnCount)

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.FindManyOpts, *[]domain.Newsletter, bool) (*int64, error)); ok {
		return rf(ctx, opts, result, returnCount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.FindManyOpts, *[]domain.Newsletter, bool) *int64); ok {
		r0 = rf(ctx, opts, result, returnCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.FindManyOpts, *[]domain.Newsletter, bool) error); ok {
		r1 = rf(ctx, opts, result, returnCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, opts, result
func (_m *MockINewsletterRepository) FindOne(ctx context.Context, opts ports.FindOneOpts, result *domain.Newsletter) error {
	ret := _m.Called(ctx, opts, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.FindOneOpts, *domain.Newsletter) error); ok {
		r0 = rf(ctx, opts, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOne provides a mock function with given fields: ctx, entity
func (_m *MockINewsletterRepository) InsertOne(ctx context.Context, entity domain.Newsletter) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Newsletter) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: ctx, opts
func (_m *MockINewsletterRepository) UpdateOne(ctx context.Context, opts ports.UpdateOpts) (*domain.Newsletter, error) {
	ret := _m.Called(ctx, opts)

	var r0 *domain.Newsletter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ports.UpdateOpts) (*domain.Newsletter, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ports.UpdateOpts) *domain.Newsletter); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Newsletter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ports.UpdateOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockINewsletterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockINewsletterRepository creates a new instance of MockINewsletterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockINewsletterRepository(t mockConstructorTestingTNewMockINewsletterRepository) *MockINewsletterRepository {
	mock := &MockINewsletterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
