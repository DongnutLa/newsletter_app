// Code generated by mockery v2.28.1. DO NOT EDIT.

package ports

import (
	context "context"

	domain "github.com/DongnutLa/newsletter_app/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockNewsletterService is an autogenerated mock type for the NewsletterService type
type MockNewsletterService struct {
	mock.Mock
}

// CreateNewsletter provides a mock function with given fields: ctx, dto
func (_m *MockNewsletterService) CreateNewsletter(ctx context.Context, dto *domain.CreateNewsletterDTO) (*domain.Newsletter, *domain.ApiError) {
	ret := _m.Called(ctx, dto)

	var r0 *domain.Newsletter
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateNewsletterDTO) (*domain.Newsletter, *domain.ApiError)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateNewsletterDTO) *domain.Newsletter); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Newsletter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateNewsletterDTO) *domain.ApiError); ok {
		r1 = rf(ctx, dto)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// ListNewsletters provides a mock function with given fields: ctx, params
func (_m *MockNewsletterService) ListNewsletters(ctx context.Context, params *domain.PaginationsParams) (*domain.PaginatedResponse[domain.Newsletter], *domain.ApiError) {
	ret := _m.Called(ctx, params)

	var r0 *domain.PaginatedResponse[domain.Newsletter]
	var r1 *domain.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PaginationsParams) (*domain.PaginatedResponse[domain.Newsletter], *domain.ApiError)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PaginationsParams) *domain.PaginatedResponse[domain.Newsletter]); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaginatedResponse[domain.Newsletter])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.PaginationsParams) *domain.ApiError); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ApiError)
		}
	}

	return r0, r1
}

// ScheduleNewsletter provides a mock function with given fields: ctx
func (_m *MockNewsletterService) ScheduleNewsletter(ctx context.Context) *domain.ApiError {
	ret := _m.Called(ctx)

	var r0 *domain.ApiError
	if rf, ok := ret.Get(0).(func(context.Context) *domain.ApiError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApiError)
		}
	}

	return r0
}

// SendNewsletter provides a mock function with given fields: ctx, dto, newsletter
func (_m *MockNewsletterService) SendNewsletter(ctx context.Context, dto *domain.SendNewsletterDTO, newsletter *domain.Newsletter) *domain.ApiError {
	ret := _m.Called(ctx, dto, newsletter)

	var r0 *domain.ApiError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SendNewsletterDTO, *domain.Newsletter) *domain.ApiError); ok {
		r0 = rf(ctx, dto, newsletter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ApiError)
		}
	}

	return r0
}

// UnregisterUserFromNewsletter provides a mock function with given fields: ctx, payload, topic
func (_m *MockNewsletterService) UnregisterUserFromNewsletter(ctx context.Context, payload map[string]interface{}, topic string) error {
	ret := _m.Called(ctx, payload, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string) error); ok {
		r0 = rf(ctx, payload, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockNewsletterService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNewsletterService creates a new instance of MockNewsletterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNewsletterService(t mockConstructorTestingTNewMockNewsletterService) *MockNewsletterService {
	mock := &MockNewsletterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
